"""
An artist
"""
type Artist implements MusicItem {
  altNames: [String!]!
  bornAt: ISO8601Date
  country: String!
  description: String
  diedAt: ISO8601Date
  gender: GenderEnum
  groups: [Group!]!
  id: ID!
  name: String!
  rating: RatingEnum
}

type Credential {
  accessToken: String!
  client: String!
  expiry: Int!
  tokenType: String!
  uid: String!
}

"""
A user-readable error
"""
type Error {
  extensions: Extension
  message: String!
  path: [String!]
}

"""
An error extension
"""
type Extension {
  code: String!
}

enum GenderEnum {
  """
  Female
  """
  female

  """
  Male
  """
  male

  """
  Other
  """
  other
}

"""
A musical genre
"""
type Genre {
  description: String!
  groups: [Group!]!
  id: ID!
  name: String!
}

"""
The connection type for Genre.
"""
type GenreConnection {
  """
  A list of edges.
  """
  edges: [GenreEdge]

  """
  A list of nodes.
  """
  nodes: [Genre]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type GenreEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Genre
}

"""
A group
"""
type Group implements MusicItem {
  altNames: [String!]!
  country: String!
  description: String
  formedAt: ISO8601Date
  genres: [Genre!]!
  id: ID!
  name: String!
  rating: RatingEnum
  status: StatusEnum
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
A music object
"""
union Music = Artist | Group | Release

"""
The connection type for Music.
"""
type MusicConnection {
  """
  A list of edges.
  """
  edges: [MusicEdge]

  """
  A list of nodes.
  """
  nodes: [Music]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MusicEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Music
}

"""
A music entity
"""
interface MusicItem {
  rating: RatingEnum
}

type Mutation {
  rate(
    """
    Parameters for Rate
    """
    input: RateInput!
  ): RatePayload
  updateUser(
    """
    Parameters for Update
    """
    input: UpdateInput!
  ): UpdatePayload
  userLogin(email: String!, password: String!): UserLoginPayload
  userLogout: UserLogoutPayload
  userResendConfirmation(email: String!, redirectUrl: String!): UserResendConfirmationPayload
  userSendPasswordReset(email: String!, redirectUrl: String!): UserSendPasswordResetPayload
  userSendPasswordResetWithToken(email: String!, redirectUrl: String!): UserSendPasswordResetWithTokenPayload
  userSignUp(confirmSuccessUrl: String, country: String!, email: String!, name: String!, password: String!, passwordConfirmation: String!): UserSignUpPayload
  userUpdatePassword(currentPassword: String, password: String!, passwordConfirmation: String!): UserUpdatePasswordPayload
  userUpdatePasswordWithToken(password: String!, passwordConfirmation: String!, resetPasswordToken: String!): UserUpdatePasswordWithTokenPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Total amount of edges in the connection.
  """
  count: Int!

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  """
  Find artist by ID
  """
  findArtist(id: String!): Artist

  """
  Find genre by ID
  """
  findGenre(id: String!): Genre

  """
  Find user by ID
  """
  findUser(id: String!): User

  """
  Get recommendations
  """
  getRecommendations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RecommendationConnection

  """
  List artists alphabetically
  """
  listArtists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GenreConnection

  """
  List genres alphabetically
  """
  listGenres(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GenreConnection

  """
  List releases alphabetically
  """
  listReleases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReleaseConnection

  """
  Find music
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String!
  ): MusicConnection
  userCheckPasswordToken(redirectUrl: String, resetPasswordToken: String!): User!
  userConfirmAccount(confirmationToken: String!, redirectUrl: String!): User!
}

"""
Autogenerated input type of Rate
"""
input RateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  rating: String
  type: String!
}

"""
Autogenerated return type of Rate
"""
type RatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  rateable: Music
}

enum RatingEnum {
  """
  Dislike
  """
  dislike

  """
  Like
  """
  like
}

enum ReasonEnum {
  """
  Similar based on artist
  """
  artist

  """
  Similar based on genre
  """
  genre

  """
  Similar based on group
  """
  group
}

"""
A personalized recommendation
"""
type Recommendation {
  reason: ReasonEnum!
  recommended: Music!
}

"""
The connection type for Recommendation.
"""
type RecommendationConnection {
  """
  A list of edges.
  """
  edges: [RecommendationEdge]

  """
  A list of nodes.
  """
  nodes: [Recommendation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RecommendationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Recommendation
}

"""
A release
"""
type Release implements MusicItem {
  artists: [Artist!]!
  groups: [Group!]!
  id: ID!
  name: String!
  rating: RatingEnum
  releasedAt: ISO8601Date!
}

"""
The connection type for Release.
"""
type ReleaseConnection {
  """
  A list of edges.
  """
  edges: [ReleaseEdge]

  """
  A list of nodes.
  """
  nodes: [Release]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ReleaseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Release
}

enum StatusEnum {
  """
  Active
  """
  active

  """
  Changed name
  """
  changed_name

  """
  Disputed
  """
  disputed

  """
  On hold
  """
  on_hold

  """
  Split up
  """
  split_up
}

"""
Autogenerated input type of Update
"""
input UpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: String
  email: String
  id: ID!
  name: String
  password: String
}

"""
Autogenerated return type of Update
"""
type UpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]!
  user: User
}

"""
A user
"""
type User {
  country: String!
  email: String!
  id: ID!
  name: String!
}

"""
Autogenerated return type of UserLogin
"""
type UserLoginPayload {
  authenticatable: User!
  credentials: Credential!
}

"""
Autogenerated return type of UserLogout
"""
type UserLogoutPayload {
  authenticatable: User!
}

"""
Autogenerated return type of UserResendConfirmation
"""
type UserResendConfirmationPayload {
  message: String!
}

"""
Autogenerated return type of UserSendPasswordReset
"""
type UserSendPasswordResetPayload {
  message: String!
}

"""
Autogenerated return type of UserSendPasswordResetWithToken
"""
type UserSendPasswordResetWithTokenPayload {
  message: String!
}

"""
Autogenerated return type of UserSignUp
"""
type UserSignUpPayload {
  authenticatable: User!

  """
  Authentication credentials. Null if after signUp resource is not active for
  authentication (e.g. Email confirmation required).
  """
  credentials: Credential
}

"""
Autogenerated return type of UserUpdatePassword
"""
type UserUpdatePasswordPayload {
  authenticatable: User!
}

"""
Autogenerated return type of UserUpdatePasswordWithToken
"""
type UserUpdatePasswordWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Resource must be signed_in for credentials to be returned.
  """
  credentials: Credential
}