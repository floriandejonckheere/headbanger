"""
An artist
"""
type Artist implements MusicItem {
  altNames: [String!]!
  bornAt: ISO8601Date
  country: String!
  description: String
  diedAt: ISO8601Date
  gender: GenderEnum
  id: ID!
  name: String!
  rating: RatingEnum
}

enum GenderEnum {
  """
  Female
  """
  female

  """
  Male
  """
  male

  """
  Other
  """
  other
}

"""
A musical genre
"""
type Genre {
  description: String!
  groups: [Group!]!
  id: ID!
  name: String!
}

"""
A group
"""
type Group implements MusicItem {
  altNames: [String!]!
  country: String!
  description: String
  formedAt: ISO8601Date
  genres: [Genre!]!
  id: ID!
  name: String!
  rating: RatingEnum
  status: StatusEnum
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
A music object
"""
union Music = Artist | Group | Release

"""
A music entity
"""
interface MusicItem {
  rating: RatingEnum
}

type Mutation {
  """
  An example field added by the generator
  """
  testField: String!
}

type Query {
  """
  Find genre by ID
  """
  findGenre(id: String!): Genre

  """
  Get recommendations
  """
  getRecommendations: [Recommendation!]

  """
  List genres alphabetically
  """
  listGenres: [Genre!]

  """
  List releases alphabetically
  """
  listReleases: [Release!]
}

enum RatingEnum {
  """
  Dislike
  """
  dislike

  """
  Like
  """
  like
}

enum ReasonEnum {
  """
  Similar based on artist
  """
  artist

  """
  Similar based on genre
  """
  genre

  """
  Similar based on group
  """
  group
}

"""
A personalized recommendation
"""
type Recommendation {
  reason: ReasonEnum!
  recommended: Music!
}

"""
A release
"""
type Release implements MusicItem {
  artists: [Artist!]!
  groups: [Group!]!
  id: ID!
  name: String!
  rating: RatingEnum
  releasedAt: ISO8601Date!
}

enum StatusEnum {
  """
  Active
  """
  active

  """
  Changed name
  """
  changed_name

  """
  Disputed
  """
  disputed

  """
  On hold
  """
  on_hold

  """
  Split up
  """
  split_up
}