name: Create release

on:
  push:
    tags:
      - 'v*'

jobs:
  app:
    name: Create release (app)
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:alpine

      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: postgres

    container:
      image: ruby:2.7-alpine

    steps:
      - uses: actions/checkout@v1

      - name: Install dependencies
        run: |
          apk add postgresql
          apk add build-base curl-dev git postgresql-dev

      - name: Cache Gems
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Gems
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Test
        run: |
          bundle exec rails db:create db:schema:load --trace
          bundle exec rails database:seed:production RAILS_ENV=test --trace
          bundle exec rspec --profile 10 --format progress

      - name: Lint
        run: bundle exec rubocop --parallel --display-cop-names

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: headbanger/app:${{ steps.get_version.outputs.VERSION }}
          registry: registry.dejonckhee.re
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  web:
    name: Create release (web)
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Get yarn cache
        id: yarn-cache
        working-directory: web
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Node packages
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Node packages
        working-directory: web
        run: yarn install --frozen-lockfile

      - name: Test
        working-directory: web
        run: yarn test:unit

      - name: Lint
        working-directory: web
        run: yarn lint

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: headbanger/web:${{ steps.get_version.outputs.VERSION }}
          registry: registry.dejonckhee.re
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          workdir: web

  release:
    name: Create release
    runs-on: ubuntu-latest
    needs:
      - app
      - web

    steps:
      - name: Create Github Release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Application is available as: ${{ github.event.repository.name }}-${{ steps.get_version.outputs.VERSION }}
            Created by Github Actions
