version: "3.8"

x-app: &app
  image: ghcr.io/floriandejonckheere/headbanger-app:v0.9.2
  environment:
    RAILS_ENV: production
    RAILS_LOG_TO_STDOUT: 1

    SECRET_KEY_BASE: ${SECRET_KEY_BASE}
    APP_EMAIL: ${APP_EMAIL}
    APP_HOST: ${APP_HOST}

    PG_HOST: ${PG_HOST}
    PG_USER: ${PG_USER}
    PG_PASSWORD: ${PG_PASSWORD}
    PG_DATABASE: ${PG_DATABASE}

    RAILS_APP_SENTRY_DSN: ${RAILS_APP_SENTRY_DSN}
    VUE_APP_INSTANCE: ${VUE_APP_INSTANCE}

    SMTP_HOST: ${SMTP_HOST}
    SMTP_PORT: ${SMTP_PORT}
    SMTP_DOMAIN: ${SMTP_DOMAIN}
    SMTP_USERNAME: ${SMTP_USERNAME}
    SMTP_PASSWORD: ${SMTP_PASSWORD}
    SMTP_FROM: ${SMTP_FROM}

    MA_ENDPOINT: ${MA_ENDPOINT}
    MA_ENDPOINT_USER: ${MA_ENDPOINT_USER}
    MA_ENDPOINT_PASSWORD: ${MA_ENDPOINT_PASSWORD}

    MB_HOST: ${MB_HOST}
    MB_USER: ${MB_USER}
    MB_PASSWORD: ${MB_PASSWORD}
    MB_DATABASE: ${MB_DATABASE}

    HB_DATA_EXPIRES_IN: ${HB_DATA_EXPIRES_IN}
    HB_SYNC_LIMIT: ${HB_SYNC_LIMIT}
    HB_SYNC_INTERVAL: ${HB_SYNC_INTERVAL}
    HB_RECOMMENDATION_LIMIT: ${HB_RECOMMENDATION_LIMIT}
  networks:
    - backend
    - proxy
  logging:
    driver: "json-file"
    options:
      max-file: "5"
      max-size: "1g"
      compress: "true"
  deploy:
    placement:
      constraints:
        - node.hostname == web
    restart_policy:
      condition: on-failure

services:
  redis:
    image: redis:alpine
    environment:
      TZ: Europe/Berlin
    volumes:
      - "redis:/data/"
    networks:
      - backend
    deploy:
      placement:
        constraints:
          - node.hostname == web
      restart_policy:
        condition: on-failure

  app:
    <<: *app

  sidekiq:
    <<: *app
    command: bundle exec sidekiq

  clock:
    <<: *app
    command: bundle exec clockwork config/clock.rb

  web:
    image: ghcr.io/floriandejonckheere/headbanger-web:v0.9.2
    environment:
      VUE_APP_SENTRY_DSN: ${VUE_APP_SENTRY_DSN}
      VUE_APP_INSTANCE: ${VUE_APP_INSTANCE}
      VUE_APP_CACHE_DOMAIN: ${VUE_APP_CACHE_DOMAIN}
    networks:
      - backend
      - proxy
    deploy:
      placement:
        constraints:
          - node.hostname == web
      restart_policy:
        condition: on-failure
      labels:
        traefik.enable: "true"
        traefik.http.middlewares.headbanger-tls.redirectscheme.scheme: "https"

        traefik.http.routers.headbanger.rule: "Host(`app.headbang.re`)"
        traefik.http.routers.headbanger.entrypoints: "web"
        traefik.http.routers.headbanger.middlewares: "headbanger-tls"

        traefik.http.routers.headbanger-tls.rule: "Host(`app.headbang.re`)"
        traefik.http.routers.headbanger-tls.entrypoints: "websecure"
        traefik.http.routers.headbanger-tls.tls: "true"
        traefik.http.routers.headbanger-tls.tls.certresolver: "letsencrypt"

        traefik.http.middlewares.metal-archives-tls.redirectscheme.scheme: "https"

        traefik.http.routers.metal-archives.rule: "Host(`ma.cache.headbang.re`)"
        traefik.http.routers.metal-archives.entrypoints: "web"
        traefik.http.routers.metal-archives.middlewares: "metal-archives-tls"

        traefik.http.routers.metal-archives-tls.rule: "Host(`ma.cache.headbang.re`)"
        traefik.http.routers.metal-archives-tls.entrypoints: "websecure"
        traefik.http.routers.metal-archives-tls.tls: "true"
        traefik.http.routers.metal-archives-tls.tls.certresolver: "letsencrypt"

        traefik.http.services.headbanger.loadbalancer.server.port: "80"
        traefik.docker.network: "traefik_proxy"

  migration:
    <<: *app
    command: bundle exec rails db:prepare
    deploy:
      placement:
        constraints:
          - node.hostname == web
      restart_policy:
        condition: none

volumes:
  redis:

networks:
  backend:
  proxy:
    external: true
    name: traefik_proxy
